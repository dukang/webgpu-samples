{"version":3,"sources":["webpack:///./src/glslang.ts","webpack:///./src/examples/computeBoids.ts"],"names":["glslang","undefined","glslangModule","import","default","title","description","init","canvas","vertexShaderGLSL","fragmentShaderGLSL","computeShaderGLSL","adapter","navigator","gpu","requestAdapter","device","requestDevice","swapChain","getContext","configureSwapChain","format","computeBindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","type","computePipelineLayout","createPipelineLayout","bindGroupLayouts","renderPipeline","createRenderPipeline","layout","vertexStage","module","createShaderModule","code","compileGLSL","source","transform","entryPoint","fragmentStage","primitiveTopology","depthStencilState","depthWriteEnabled","depthCompare","vertexState","vertexBuffers","arrayStride","stepMode","attributes","shaderLocation","offset","colorStates","computePipeline","createComputePipeline","computeStage","renderPassDescriptor","colorAttachments","attachment","loadValue","r","g","b","a","depthStencilAttachment","createTexture","size","width","height","depth","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","createView","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","vertexBufferData","Float32Array","verticesBuffer","createBuffer","byteLength","GPUBufferUsage","VERTEX","mappedAtCreation","getMappedRange","set","unmap","simParamData","simParamBuffer","UNIFORM","initialParticleData","numParticles","i","Math","random","particleBuffers","Array","particleBindGroups","STORAGE","createBindGroup","resource","buffer","t","getCurrentTexture","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","beginRenderPass","setVertexBuffer","draw","defaultQueue","submit","finish"],"mappings":"kYAAA,IAAIA,OAAUC,EACC,e,yCACb,QAAgBA,IAAZD,EAAuB,OAAOA,EAElC,MAAME,QAAsBC,OAAiC,sEAE7D,OADAH,QAAgBE,EAAcE,UACvBJ,O,+cCJF,MAAMK,EAAQ,gBACRC,EAAc,4RAKpB,SAAeC,EAAKC,G,yCACzB,MAEMC,EAAmB,uZAWnBC,EAAqB,6GAMrBC,EAAoB,6sEAqFpBC,QAAgBC,UAAUC,IAAIC,iBAC9BC,QAAeJ,EAAQK,gBACvBjB,QAAgB,cAKhBkB,EAHUV,EAAOW,WAAW,cAGRC,mBAAmB,CAC3CJ,SACAK,OAAQ,eAGJC,EAAyBN,EAAOO,sBAAsB,CAC1DC,QAAS,CACP,CAAEC,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,kBACxD,CAAEJ,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,kBACxD,CAAEJ,QAAS,EAAGC,WAAYC,eAAeC,QAASC,KAAM,qBAItDC,EAAwBd,EAAOe,qBAAqB,CACxDC,iBAAkB,CAACV,KAGfW,EAAiBjB,EAAOkB,qBAAqB,CACjDC,OAAQnB,EAAOe,qBAAqB,CAAEC,iBAAkB,KAExDI,YAAa,CACXC,OAAQrB,EAAOsB,mBAAmB,CAChCC,KAAMvC,EAAQwC,YAAY/B,EAAkB,UAG5CgC,OAAQhC,EACRiC,UAAWD,GAAUzC,EAAQwC,YAAYC,EAAQ,YAEnDE,WAAY,QAEdC,cAAe,CACbP,OAAQrB,EAAOsB,mBAAmB,CAChCC,KAAMvC,EAAQwC,YAAY9B,EAAoB,YAG9C+B,OAAQ/B,EACRgC,UAAWD,GAAUzC,EAAQwC,YAAYC,EAAQ,cAEnDE,WAAY,QAGdE,kBAAmB,gBAEnBC,kBAAmB,CACjBC,mBAAmB,EACnBC,aAAc,OACd3B,OAAQ,wBAGV4B,YAAa,CACXC,cAAe,CAAC,CAEdC,YAAa,GACbC,SAAU,WACVC,WAAY,CAAC,CAEXC,eAAgB,EAChBC,OAAQ,EACRlC,OAAQ,UACP,CAEDiC,eAAgB,EAChBC,OAAQ,EACRlC,OAAQ,YAET,CAED8B,YAAa,EACbC,SAAU,SACVC,WAAY,CAAC,CAEXC,eAAgB,EAChBC,OAAQ,EACRlC,OAAQ,cAKdmC,YAAa,CAAC,CACZnC,OAAQ,iBAINoC,EAAkBzC,EAAO0C,sBAAsB,CACnDvB,OAAQL,EACR6B,aAAc,CACZtB,OAAQrB,EAAOsB,mBAAmB,CAChCC,KAAMvC,EAAQwC,YAAY7B,EAAmB,WAG7C8B,OAAQ9B,EACR+B,UAAWD,GAAUzC,EAAQwC,YAAYC,EAAQ,aAEnDE,WAAY,UAUViB,EAAgD,CACpDC,iBAAkB,CAAC,CACjBC,gBAAY7D,EACZ8D,UAAW,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,EAAKC,EAAG,KAE1CC,uBAAwB,CACtBN,WAZiB9C,EAAOqD,cAAc,CACxCC,KAAM,CAAEC,MAAO/D,EAAO+D,MAAOC,OAAQhE,EAAOgE,OAAQC,MAAO,GAC3DpD,OAAQ,uBACRqD,MAAOC,gBAAgBC,oBASIC,aACzBC,eAAgB,EAChBC,aAAc,QACdC,iBAAkB,EAClBC,eAAgB,UAIdC,EAAmB,IAAIC,aAAa,EAAE,KAAO,IAAM,KAAO,IAAM,EAAM,MACtEC,EAAiBpE,EAAOqE,aAAa,CACzCf,KAAMY,EAAiBI,WACvBZ,MAAOa,eAAeC,OACtBC,kBAAkB,IAEpB,IAAIN,aAAaC,EAAeM,kBAAkBC,IAAIT,GACtDE,EAAeQ,QAEf,MAAMC,EAAe,IAAIV,aAAa,CACpC,IACA,GACA,KACA,KACA,IACA,IACA,OAEIW,EAAiB9E,EAAOqE,aAAa,CACzCf,KAAMuB,EAAaP,WACnBZ,MAAOa,eAAeQ,QACtBN,kBAAkB,IAEpB,IAAIN,aAAaW,EAAeJ,kBAAkBC,IAAIE,GACtDC,EAAeF,QAEf,MAAMI,EAAsB,IAAIb,aAAac,KAC7C,IAAK,IAAIC,EAAI,EAAGA,EA/PK,OA+PeA,EAClCF,EAAoB,EAAIE,EAAI,GAAK,GAAKC,KAAKC,SAAW,IACtDJ,EAAoB,EAAIE,EAAI,GAAK,GAAKC,KAAKC,SAAW,IACtDJ,EAAoB,EAAIE,EAAI,GAAK,GAAKC,KAAKC,SAAW,IAAO,GAC7DJ,EAAoB,EAAIE,EAAI,GAAK,GAAKC,KAAKC,SAAW,IAAO,GAG/D,MAAMC,EAA+B,IAAIC,MAAM,GACzCC,EAAqC,IAAID,MAAM,GACrD,IAAK,IAAIJ,EAAI,EAAGA,EAAI,IAAKA,EACvBG,EAAgBH,GAAKlF,EAAOqE,aAAa,CACvCf,KAAM0B,EAAoBV,WAC1BZ,MAAOa,eAAeC,OAASD,eAAeiB,QAC9Cf,kBAAkB,IAEpB,IAAIN,aAAakB,EAAgBH,GAAGR,kBAAkBC,IAAIK,GAC1DK,EAAgBH,GAAGN,QAGrB,IAAK,IAAIM,EAAI,EAAGA,EAAI,IAAKA,EACvBK,EAAmBL,GAAKlF,EAAOyF,gBAAgB,CAC7CtE,OAAQb,EACRE,QAAS,CAAC,CACRC,QAAS,EACTiF,SAAU,CACRC,OAAQb,EACRvC,OAAQ,EACRe,KAAMuB,EAAaP,aAEpB,CACD7D,QAAS,EACTiF,SAAU,CACRC,OAAQN,EAAgBH,GACxB3C,OAAQ,EACRe,KAAM0B,EAAoBV,aAE3B,CACD7D,QAAS,EACTiF,SAAU,CACRC,OAAQN,GAAiBH,EAAI,GAAK,GAClC3C,OAAQ,EACRe,KAAM0B,EAAoBV,gBAMlC,IAAIsB,EAAI,EACR,OAAO,WACLhD,EAAqBC,iBAAiB,GAAGC,WAAa5C,EAAU2F,oBAAoBhC,aAEpF,MAAMiC,EAAiB9F,EAAO+F,qBAAqB,IACnD,CACE,MAAMC,EAAcF,EAAeG,mBACnCD,EAAYE,YAAYzD,GACxBuD,EAAYG,aAAa,EAAGZ,EAAmBK,EAAI,IACnDI,EAAYI,SAvTK,MAwTjBJ,EAAYK,UAEd,CACE,MAAML,EAAcF,EAAeQ,gBAAgB1D,GACnDoD,EAAYE,YAAYjF,GACxB+E,EAAYO,gBAAgB,EAAGlB,GAAiBO,EAAI,GAAK,IACzDI,EAAYO,gBAAgB,EAAGnC,GAC/B4B,EAAYQ,KAAK,EA/TA,KA+TiB,EAAG,GACrCR,EAAYK,UAEdrG,EAAOyG,aAAaC,OAAO,CAACZ,EAAea,aAEzCf","file":"computeBoids-5e83e6.js","sourcesContent":["let glslang = undefined;\nexport default async function() {\n  if (glslang !== undefined) return glslang;\n  // @ts-ignore\n  const glslangModule = await import(/* webpackIgnore: true */ 'https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js');\n  glslang = await glslangModule.default();\n  return glslang;\n}\n","import glslangModule from '../glslang';\n\nexport const title = 'Compute Boids';\nexport const description = 'A GPU compute particle simulation that mimics \\\n                            the flocking behavior of birds. A compute shader updates \\\n                            two ping-pong buffers which store particle data. The data \\\n                            is used to draw instanced particles.';\n\nexport async function init(canvas: HTMLCanvasElement) {\n  const numParticles = 1500;\n\n  const vertexShaderGLSL = `#version 450\n  layout(location = 0) in vec2 a_particlePos;\n  layout(location = 1) in vec2 a_particleVel;\n  layout(location = 2) in vec2 a_pos;\n  void main() {\n    float angle = -atan(a_particleVel.x, a_particleVel.y);\n    vec2 pos = vec2(a_pos.x * cos(angle) - a_pos.y * sin(angle),\n            a_pos.x * sin(angle) + a_pos.y * cos(angle));\n    gl_Position = vec4(pos + a_particlePos, 0, 1);\n  }`;\n\n  const fragmentShaderGLSL = `#version 450\n  layout(location = 0) out vec4 fragColor;\n  void main() {\n    fragColor = vec4(1.0);\n  }`;\n\n  const computeShaderGLSL = `#version 450\n  struct Particle {\n    vec2 pos;\n    vec2 vel;\n  };\n\n  layout(std140, set = 0, binding = 0) uniform SimParams {\n    float deltaT;\n    float rule1Distance;\n    float rule2Distance;\n    float rule3Distance;\n    float rule1Scale;\n    float rule2Scale;\n    float rule3Scale;\n  } params;\n\n  layout(std140, set = 0, binding = 1) buffer ParticlesA {\n    Particle particles[${numParticles}];\n  } particlesA;\n\n  layout(std140, set = 0, binding = 2) buffer ParticlesB {\n    Particle particles[${numParticles}];\n  } particlesB;\n\n  void main() {\n    // https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\n\n    uint index = gl_GlobalInvocationID.x;\n    if (index >= ${numParticles}) { return; }\n\n    vec2 vPos = particlesA.particles[index].pos;\n    vec2 vVel = particlesA.particles[index].vel;\n\n    vec2 cMass = vec2(0.0, 0.0);\n    vec2 cVel = vec2(0.0, 0.0);\n    vec2 colVel = vec2(0.0, 0.0);\n    int cMassCount = 0;\n    int cVelCount = 0;\n\n    vec2 pos;\n    vec2 vel;\n    for (int i = 0; i < ${numParticles}; ++i) {\n      if (i == index) { continue; }\n      pos = particlesA.particles[i].pos.xy;\n      vel = particlesA.particles[i].vel.xy;\n\n      if (distance(pos, vPos) < params.rule1Distance) {\n        cMass += pos;\n        cMassCount++;\n      }\n      if (distance(pos, vPos) < params.rule2Distance) {\n        colVel -= (pos - vPos);\n      }\n      if (distance(pos, vPos) < params.rule3Distance) {\n        cVel += vel;\n        cVelCount++;\n      }\n    }\n    if (cMassCount > 0) {\n      cMass = cMass / cMassCount - vPos;\n    }\n    if (cVelCount > 0) {\n      cVel = cVel / cVelCount;\n    }\n\n    vVel += cMass * params.rule1Scale + colVel * params.rule2Scale + cVel * params.rule3Scale;\n\n    // clamp velocity for a more pleasing simulation.\n    vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\n\n    // kinematic update\n    vPos += vVel * params.deltaT;\n\n    // Wrap around boundary\n    if (vPos.x < -1.0) vPos.x = 1.0;\n    if (vPos.x > 1.0) vPos.x = -1.0;\n    if (vPos.y < -1.0) vPos.y = 1.0;\n    if (vPos.y > 1.0) vPos.y = -1.0;\n\n    particlesB.particles[index].pos = vPos;\n\n    // Write back\n    particlesB.particles[index].vel = vVel;\n  }`;\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const glslang = await glslangModule();\n\n  const context = canvas.getContext('gpupresent');\n\n  // @ts-ignore:\n  const swapChain = context.configureSwapChain({\n    device,\n    format: \"bgra8unorm\"\n  });\n\n  const computeBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: \"uniform-buffer\" },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\n      { binding: 2, visibility: GPUShaderStage.COMPUTE, type: \"storage-buffer\" },\n    ],\n  });\n\n  const computePipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [computeBindGroupLayout],\n  });\n\n  const renderPipeline = device.createRenderPipeline({\n    layout: device.createPipelineLayout({ bindGroupLayouts: [] }),\n\n    vertexStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(vertexShaderGLSL, \"vertex\"),\n\n        // @ts-ignore\n        source: vertexShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"vertex\"),\n      }),\n      entryPoint: \"main\"\n    },\n    fragmentStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(fragmentShaderGLSL, \"fragment\"),\n\n        // @ts-ignore\n        source: fragmentShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"fragment\"),\n      }),\n      entryPoint: \"main\"\n    },\n\n    primitiveTopology: \"triangle-list\",\n\n    depthStencilState: {\n      depthWriteEnabled: true,\n      depthCompare: \"less\",\n      format: \"depth24plus-stencil8\",\n    },\n\n    vertexState: {\n      vertexBuffers: [{\n        // instanced particles buffer\n        arrayStride: 4 * 4,\n        stepMode: \"instance\",\n        attributes: [{\n          // instance position\n          shaderLocation: 0,\n          offset: 0,\n          format: \"float2\"\n        }, {\n          // instance velocity\n          shaderLocation: 1,\n          offset: 2 * 4,\n          format: \"float2\"\n        }],\n      }, {\n        // vertex buffer\n        arrayStride: 2 * 4,\n        stepMode: \"vertex\",\n        attributes: [{\n          // vertex positions\n          shaderLocation: 2,\n          offset: 0,\n          format: \"float2\"\n        }],\n      }],\n    },\n\n    colorStates: [{\n      format: \"bgra8unorm\",\n    }],\n  });\n\n  const computePipeline = device.createComputePipeline({\n    layout: computePipelineLayout,\n    computeStage: {\n      module: device.createShaderModule({\n        code: glslang.compileGLSL(computeShaderGLSL, \"compute\"),\n\n        // @ts-ignore\n        source: computeShaderGLSL,\n        transform: source => glslang.compileGLSL(source, \"compute\"),\n      }),\n      entryPoint: \"main\"\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height, depth: 1 },\n    format: \"depth24plus-stencil8\",\n    usage: GPUTextureUsage.OUTPUT_ATTACHMENT\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [{\n      attachment: undefined,  // Assigned later\n      loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n    }],\n    depthStencilAttachment: {\n      attachment: depthTexture.createView(),\n      depthLoadValue: 1.0,\n      depthStoreOp: \"store\",\n      stencilLoadValue: 0,\n      stencilStoreOp: \"store\",\n    }\n  };\n\n  const vertexBufferData = new Float32Array([-0.01, -0.02, 0.01, -0.02, 0.00, 0.02]);\n  const verticesBuffer = device.createBuffer({\n    size: vertexBufferData.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(vertexBufferData);\n  verticesBuffer.unmap();\n\n  const simParamData = new Float32Array([\n    0.04,  // deltaT;\n    0.1,   // rule1Distance;\n    0.025, // rule2Distance;\n    0.025, // rule3Distance;\n    0.02,  // rule1Scale;\n    0.05,  // rule2Scale;\n    0.005  // rule3Scale;\n  ]);\n  const simParamBuffer = device.createBuffer({\n    size: simParamData.byteLength,\n    usage: GPUBufferUsage.UNIFORM,\n    mappedAtCreation: true,\n  });\n  new Float32Array(simParamBuffer.getMappedRange()).set(simParamData);\n  simParamBuffer.unmap();\n\n  const initialParticleData = new Float32Array(numParticles * 4);\n  for (let i = 0; i < numParticles; ++i) {\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\n  }\n\n  const particleBuffers: GPUBuffer[] = new Array(2);\n  const particleBindGroups: GPUBindGroup[] = new Array(2);\n  for (let i = 0; i < 2; ++i) {\n    particleBuffers[i] = device.createBuffer({\n      size: initialParticleData.byteLength,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\n      mappedAtCreation: true,\n    });\n    new Float32Array(particleBuffers[i].getMappedRange()).set(initialParticleData);\n    particleBuffers[i].unmap();\n  }\n\n  for (let i = 0; i < 2; ++i) {\n    particleBindGroups[i] = device.createBindGroup({\n      layout: computeBindGroupLayout,\n      entries: [{\n        binding: 0,\n        resource: {\n          buffer: simParamBuffer,\n          offset: 0,\n          size: simParamData.byteLength\n        },\n      }, {\n        binding: 1,\n        resource: {\n          buffer: particleBuffers[i],\n          offset: 0,\n          size: initialParticleData.byteLength,\n        },\n      }, {\n        binding: 2,\n        resource: {\n          buffer: particleBuffers[(i + 1) % 2],\n          offset: 0,\n          size: initialParticleData.byteLength,\n        },\n      }],\n    });\n  }\n\n  let t = 0;\n  return function frame() {\n    renderPassDescriptor.colorAttachments[0].attachment = swapChain.getCurrentTexture().createView();\n\n    const commandEncoder = device.createCommandEncoder({});\n    {\n      const passEncoder = commandEncoder.beginComputePass();\n      passEncoder.setPipeline(computePipeline);\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\n      passEncoder.dispatch(numParticles);\n      passEncoder.endPass();\n    }\n    {\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(renderPipeline);\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\n      passEncoder.setVertexBuffer(1, verticesBuffer);\n      passEncoder.draw(3, numParticles, 0, 0);\n      passEncoder.endPass();\n    }\n    device.defaultQueue.submit([commandEncoder.finish()]);\n\n    ++t;\n  }\n}\n"],"sourceRoot":""}